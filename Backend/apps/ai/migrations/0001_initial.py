# Generated by Django 5.2.4 on 2025-07-11 05:50

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '__first__'),
        ('core', '0001_initial'),
        ('jobs', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('recommendation_type', models.CharField(choices=[('job_match', 'Job Match'), ('skill_development', 'Skill Development'), ('career_path', 'Career Path'), ('salary_insight', 'Salary Insight'), ('market_trend', 'Market Trend'), ('company_match', 'Company Match')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('content', models.JSONField(help_text='Structured recommendation data')),
                ('relevance_score', models.FloatField(help_text='Relevance score (0-1)')),
                ('confidence_score', models.FloatField(help_text='AI confidence (0-1)')),
                ('priority_score', models.FloatField(help_text='Priority for display (0-1)')),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_clicked', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('is_saved', models.BooleanField(default=False)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('related_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='companies.company')),
                ('related_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='jobs.jobposting')),
                ('related_skills', models.ManyToManyField(blank=True, to='core.skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_recommendations',
            },
        ),
        migrations.CreateModel(
            name='JobEmbedding',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('embedding_vector', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='256-dimensional job embedding vector', size=256)),
                ('requirements_vector', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Requirements-based embedding vector', size=256)),
                ('description_vector', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Job description embedding vector', size=256)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding', to='jobs.jobposting')),
            ],
            options={
                'db_table': 'job_embeddings',
            },
        ),
        migrations.CreateModel(
            name='JobMatchScore',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('overall_score', models.FloatField(help_text='Overall compatibility score (0-1)')),
                ('skills_match_score', models.FloatField(help_text='Skills compatibility score (0-1)')),
                ('experience_match_score', models.FloatField(help_text='Experience level match score (0-1)')),
                ('location_match_score', models.FloatField(help_text='Location preference match score (0-1)')),
                ('salary_match_score', models.FloatField(help_text='Salary expectation match score (0-1)')),
                ('confidence_score', models.FloatField(help_text='Model confidence in prediction (0-1)')),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('rank_score', models.IntegerField(help_text='Rank among all jobs for this user')),
                ('is_recommended', models.BooleanField(default=False)),
                ('was_viewed', models.BooleanField(default=False)),
                ('was_clicked', models.BooleanField(default=False)),
                ('was_applied', models.BooleanField(default=False)),
                ('was_saved', models.BooleanField(default=False)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_matches', to='jobs.jobposting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_matches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'job_match_scores',
            },
        ),
        migrations.CreateModel(
            name='JobPerformanceMetrics',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('total_views', models.IntegerField(default=0)),
                ('unique_views', models.IntegerField(default=0)),
                ('avg_view_duration', models.FloatField(blank=True, null=True)),
                ('total_applications', models.IntegerField(default=0)),
                ('qualified_applications', models.IntegerField(default=0)),
                ('application_rate', models.FloatField(blank=True, null=True)),
                ('saves_count', models.IntegerField(default=0)),
                ('shares_count', models.IntegerField(default=0)),
                ('clicks_count', models.IntegerField(default=0)),
                ('avg_match_score', models.FloatField(blank=True, null=True)),
                ('recommendation_clicks', models.IntegerField(default=0)),
                ('ai_sourced_applications', models.IntegerField(default=0)),
                ('employer_rating', models.FloatField(blank=True, null=True)),
                ('candidate_feedback_score', models.FloatField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='jobs.jobposting')),
            ],
            options={
                'db_table': 'job_performance_metrics',
            },
        ),
        migrations.CreateModel(
            name='JobSummary',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('brief_summary', models.TextField(help_text='Brief 2-3 sentence summary')),
                ('detailed_summary', models.TextField(help_text='Detailed paragraph summary')),
                ('key_highlights', models.JSONField(help_text='Key highlights as JSON array')),
                ('extracted_skills', models.JSONField(help_text='AI-extracted skills from job description')),
                ('extracted_requirements', models.JSONField(help_text='AI-extracted requirements')),
                ('extracted_benefits', models.JSONField(help_text='AI-extracted benefits')),
                ('job_category', models.CharField(help_text='AI-classified job category', max_length=100)),
                ('seniority_level', models.CharField(help_text='AI-classified seniority level', max_length=50)),
                ('confidence_score', models.FloatField(help_text='AI confidence in summary quality (0-1)')),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_summary', to='jobs.jobposting')),
            ],
            options={
                'db_table': 'job_summaries',
            },
        ),
        migrations.CreateModel(
            name='MLModelMetrics',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('model_type', models.CharField(choices=[('user_embedding', 'User Embedding'), ('job_embedding', 'Job Embedding'), ('job_matching', 'Job Matching'), ('summary_generation', 'Summary Generation'), ('skill_extraction', 'Skill Extraction'), ('job_classification', 'Job Classification')], max_length=50)),
                ('model_version', models.CharField(max_length=50)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('predictions_count', models.IntegerField(default=0)),
                ('avg_inference_time', models.FloatField(blank=True, null=True)),
                ('user_feedback_score', models.FloatField(blank=True, null=True)),
                ('click_through_rate', models.FloatField(blank=True, null=True)),
                ('evaluation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('training_data_size', models.IntegerField(blank=True, null=True)),
                ('additional_metrics', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'ml_model_metrics',
                'indexes': [models.Index(fields=['model_type', 'model_version'], name='ml_model_me_model_t_9fb159_idx'), models.Index(fields=['evaluation_date'], name='ml_model_me_evaluat_f04b97_idx')],
                'unique_together': {('model_type', 'model_version', 'evaluation_date')},
            },
        ),
        migrations.CreateModel(
            name='UserEmbedding',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('embedding_vector', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='256-dimensional user embedding vector', size=256)),
                ('skills_vector', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Skills-based embedding vector', size=256)),
                ('preference_vector', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='Job preference embedding vector', size=256)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_embeddings',
            },
        ),
        migrations.CreateModel(
            name='UserInteractionLog',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('interaction_type', models.CharField(choices=[('job_view', 'Job View'), ('job_click', 'Job Click'), ('job_apply', 'Job Apply'), ('job_save', 'Job Save'), ('job_share', 'Job Share'), ('search_query', 'Search Query'), ('filter_apply', 'Filter Apply'), ('recommendation_click', 'Recommendation Click'), ('recommendation_dismiss', 'Recommendation Dismiss'), ('profile_update', 'Profile Update')], max_length=50)),
                ('interaction_data', models.JSONField(help_text='Structured interaction data')),
                ('session_id', models.CharField(blank=True, max_length=255)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='jobs.jobposting')),
                ('recommendation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ai.airecommendation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_interaction_logs',
            },
        ),
        migrations.AddIndex(
            model_name='airecommendation',
            index=models.Index(fields=['user', 'recommendation_type', 'relevance_score'], name='ai_recommen_user_id_2cd2f5_idx'),
        ),
        migrations.AddIndex(
            model_name='airecommendation',
            index=models.Index(fields=['expires_at'], name='ai_recommen_expires_fc7b49_idx'),
        ),
        migrations.AddIndex(
            model_name='jobembedding',
            index=models.Index(fields=['job', 'last_updated'], name='job_embeddi_job_id_6606c7_idx'),
        ),
        migrations.AddIndex(
            model_name='jobembedding',
            index=models.Index(fields=['model_version'], name='job_embeddi_model_v_5dda0f_idx'),
        ),
        migrations.AddIndex(
            model_name='jobmatchscore',
            index=models.Index(fields=['user', 'overall_score'], name='job_match_s_user_id_7e1630_idx'),
        ),
        migrations.AddIndex(
            model_name='jobmatchscore',
            index=models.Index(fields=['job', 'overall_score'], name='job_match_s_job_id_bc339c_idx'),
        ),
        migrations.AddIndex(
            model_name='jobmatchscore',
            index=models.Index(fields=['is_recommended', 'overall_score'], name='job_match_s_is_reco_817b6a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='jobmatchscore',
            unique_together={('user', 'job')},
        ),
        migrations.AddIndex(
            model_name='jobperformancemetrics',
            index=models.Index(fields=['job', 'last_updated'], name='job_perform_job_id_02822b_idx'),
        ),
        migrations.AddIndex(
            model_name='jobperformancemetrics',
            index=models.Index(fields=['avg_match_score'], name='job_perform_avg_mat_e57e62_idx'),
        ),
        migrations.AddIndex(
            model_name='jobsummary',
            index=models.Index(fields=['job', 'last_updated'], name='job_summari_job_id_b9eec0_idx'),
        ),
        migrations.AddIndex(
            model_name='jobsummary',
            index=models.Index(fields=['job_category'], name='job_summari_job_cat_38c55a_idx'),
        ),
        migrations.AddIndex(
            model_name='userembedding',
            index=models.Index(fields=['user', 'last_updated'], name='user_embedd_user_id_1c76c0_idx'),
        ),
        migrations.AddIndex(
            model_name='userembedding',
            index=models.Index(fields=['model_version'], name='user_embedd_model_v_35538e_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteractionlog',
            index=models.Index(fields=['user', 'interaction_type', 'timestamp'], name='user_intera_user_id_e652f9_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteractionlog',
            index=models.Index(fields=['job', 'interaction_type'], name='user_intera_job_id_9420a2_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteractionlog',
            index=models.Index(fields=['timestamp'], name='user_intera_timesta_5cf5f5_idx'),
        ),
    ]
